<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="Admin">
<!-- 관리자 로그인  -->
<select id="loginCheck" parameterType="model.AdminDto" resultType="model.AdminDto">
SELECT ID, AUTH
FROM ADMIN
WHERE ID = #{id} AND PASSWORD = #{password} 
</select>
<!-- 일반 회원관리 데이터 모두 가져오기 -->
<select id="amemberAll" resultType="model.AMemberDto">
 SELECT SEQ, EMAIL, NAME, SIGNDATE, DEL
 FROM A_MEMBER
 ORDER BY SEQ DESC
</select>
<!-- 기업 회원관리 데이터 모두 가져오기 -->
<select id="cmemberAll" resultType="model.AMemberDto">
 SELECT SEQ, EMAIL, NAME, SIGNDATE, DEL
 FROM C_MEMBER
 ORDER BY SEQ DESC
</select>
<!-- 일반회원 신규가입수 -->
<select id="countNewAMember" resultType="int">
SELECT COUNT(*)
FROM A_MEMBER
where DATE_SUB(NOW(), INTERVAL 3 DAY) &lt;= DATE(SIGNDATE) AND DEL != 1
</select>
<!-- 기업회원 신규가입수 -->
<select id="countNewCMember" resultType="int">
SELECT COUNT(*)
FROM C_MEMBER
where DATE_SUB(NOW(), INTERVAL 3 DAY) &lt;= DATE(SIGNDATE) AND DEL != 1
</select>
<!-- 일반회원 / 기업회원수 -->
<select id="countAllAMember" resultType="int">
SELECT COUNT(*) FROM A_MEMBER where DEL != 1
</select>
<select id="countAllCMember" resultType="int">
SELECT COUNT(*) FROM C_MEMBER where DEL != 1
</select>

<!-- 가입 미승인된 기업 불러오기 -->
<select id="getUnapprovalList" resultType="model.CMemberDto">
SELECT SEQ, EMAIL, NAME, TYPE, NUMBER, DEL
FROM C_MEMBER
WHERE DEL = -2 OR DEL = 0
</select>
<!-- 기업가입승인하기 -->
<update id="approveCompany" parameterType="int">
UPDATE C_MEMBER
SET DEL = 2
WHERE SEQ = ${seq}
</update>
<!-- 기업가입승인 취소하기 -->
<update id="unapproveCompany" parameterType="int">
UPDATE C_MEMBER
SET DEL = -2
WHERE SEQ = ${seq}
</update>
<!-- 일반회원 탈퇴목록 불러오기 -->
<select id="getWithdrawMemberA" resultType="model.AMemberDto">
SELECT * 
FROM A_MEMBER
WHERE DEL = 1
</select>
<!-- 기업회원 탈퇴목록 불러오기 -->
<select id="getWithdrawMemberC" resultType="model.CMemberDto">
SELECT * 
FROM C_MEMBER
WHERE DEL = 1
</select>

<!-- 일반회원 탈퇴처리  -->
<!-- 회원 del처리 -->
<update id="updateDelMemberA" parameterType="model.AMemberDto">
UPDATE A_MEMBER
SET DEL = 1
WHERE SEQ = ${seq}
</update>

<!-- 기업회원 탈퇴처리  -->
<update id="updateDelMemberC" parameterType="model.CMemberDto">
UPDATE C_MEMBER
SET DEL = 1
WHERE SEQ = ${seq}
</update>

<!-- 일반회원 탈퇴복구 -->
<update id="recoverMemberA" parameterType="model.AMemberDto">
UPDATE A_MEMBER
SET DEL = 0
WHERE SEQ = ${seq}
</update>

<!-- 기업회원 탈퇴복구 -->
<update id="recoverMemberC" parameterType="model.CMemberDto">
UPDATE C_MEMBER
SET DEL = -1
WHERE SEQ = ${seq}
</update>

<!-- 이력서 관리 : 이력서 목록 가져오기 -->
<select id="getAllResume" resultType="model.AdminParam">
SELECT r.seq, r.memseq, a.name as username, r.name as resumeName, r.status, r.del, r.mainresume, r.wdate
FROM RESUME as r
inner join a_member as a on r.memseq = a.seq
ORDER BY SEQ DESC
</select>

<!-- 제출한 이력서 관리 : 제출 이력서 목록 가져오기 -->
<select id="getAllResume2" resultType="model.AdminParam">
select r.seq, r.memseq, c.name as comName, r.name as resumeName, r.username, r.whose, r.del, r.open, r.wdate
from resume_after r
inner join c_member c on c.seq = r.comseq
ORDER BY SEQ DESC
</select>

<!-- 이력서 관리 : 이력서 삭제처리하기  -->
<update id="updateDelResume" parameterType="int">
UPDATE Resume
SET DEL = 1
WHERE SEQ = ${seq}
</update>
<!-- 이력서 관리 : 제출 이력서 삭제처리하기  -->
<update id="updateDelResume2" parameterType="int">
UPDATE Resume_after
SET DEL = 1
WHERE SEQ = ${seq}
</update>

<!-- 삭제된 이력서  -->

<!-- 기업공고 모두 불러오기  -->
<select id="getAllRecruit" resultType="model.RecruitDto">
select seq, comseq, comname, comjob1, comjob2, comjobtype, wdate, edate, del
from recruit
ORDER BY SEQ DESC
</select>

<!-- 기업공고 관리 : 기업공고 삭제처리하기  -->
<update id="updateDelRecruit" parameterType="int">
UPDATE Recruit
SET DEL = 1
WHERE SEQ = ${seq}
</update>


<!-- 통계 : 기업회원 직종 분포비율  -->
<select id="getDepartmentStatistics" resultType="model.StatisticsParam">
select count(*) as statNum1, department as statStr1, type as statStr2
from c_member
where del != 1
group by type, department
order by department, type
</select>
<!-- 통계 : 제출이력서 수  -->
<select id="getTotalResumeAfter" resultType="int">
select count(*) as statNum1
from resume_after
where del != 1
</select>
<!-- 통계 : 이력서 제출한 기업군 비율  -->
<select id="getResumeStatistics" resultType="model.StatisticsParam">
select re.comjob1 as statStr1, count( re.comjob1) as statNum1
from resume_after ra
inner join recruit  re on ra.jobseq = re.seq
group by re.comjob1
</select>
<!-- 현재 진행중인 공고 개수 -->
<select id="getRecruitNumber" resultType="int">
select count(*)
from recruit
where del = 0
</select>

<!-- 현재 채용중인 공고 통계  -->
<select id="getRecruitStatistics" resultType="model.StatisticsParam">
select comjob1 statStr1, comjob2 as statStr2, count(comjob1) as statNum1
from recruit
where del = 0
group by comjob1, comjob2
</select>


</mapper>



